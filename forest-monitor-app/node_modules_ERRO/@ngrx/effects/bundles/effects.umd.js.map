{"version":3,"file":"effects.umd.js","sources":["../../../../../modules/effects/src/effect_creator.ts","../../../../../modules/effects/src/utils.ts","../../../../../modules/effects/src/effect_decorator.ts","../../../../../modules/effects/src/effects_metadata.ts","../../../../../modules/effects/src/effects_resolver.ts","../../../../../modules/effects/src/actions.ts","../../../../../modules/effects/src/effect_notification.ts","../../../../../modules/effects/src/lifecycle_hooks.ts","../../../../../modules/effects/src/effect_sources.ts","../../../../../modules/effects/src/tokens.ts","../../../../../modules/effects/src/effects_runner.ts","../../../../../modules/effects/src/effects_root_module.ts","../../../../../modules/effects/src/effects_feature_module.ts","../../../../../modules/effects/src/effects_module.ts","../../../../../modules/effects/src/act.ts","../../../../../modules/effects/index.ts","../../../../../modules/effects/effects.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { Action } from '@ngrx/store';\nimport { EffectMetadata, EffectConfig } from './models';\n\nconst CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\ntype DispatchType<T> = T extends { dispatch: infer U } ? U : unknown;\ntype ObservableReturnType<T> = T extends false\n  ? Observable<unknown>\n  : Observable<Action>;\n/**\n * @description\n * Creates an effect from an `Observable` and an `EffectConfig`.\n *\n * @param source A function which returns an `Observable`.\n * @param config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `resubscribeOnError` is true.\n * @returns If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n *\n * @usageNotes\n *\n * ** Mapping to a different action **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     map(() => FeatureActions.actionTwo())\n *   )\n * );\n * ```\n *\n *  ** Non-dispatching effects **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     tap(() => console.log('Action One Dispatched'))\n *   ),\n *   { dispatch: false }\n *   // FeatureActions.actionOne is not dispatched\n * );\n * ```\n */\nexport function createEffect<\n  C extends EffectConfig,\n  T extends DispatchType<C>,\n  O extends ObservableReturnType<T>,\n  R extends O | ((...args: any[]) => O)\n>(source: () => R, config?: Partial<C>): R {\n  const effect = source();\n  // Right now both createEffect and @Effect decorator set default values.\n  // Ideally that should only be done in one place that aggregates that info,\n  // for example in mergeEffects().\n  const value: EffectConfig = {\n    dispatch: true,\n    resubscribeOnError: true,\n    ...config, // Overrides any defaults if values are provided\n  };\n  Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n    value,\n  });\n  return effect;\n}\n\nexport function getCreateEffectMetadata<T>(instance: T): EffectMetadata<T>[] {\n  const propertyNames = Object.getOwnPropertyNames(instance) as Extract<\n    keyof T,\n    string\n  >[];\n\n  const metadata: EffectMetadata<T>[] = propertyNames\n    .filter(\n      propertyName =>\n        instance[propertyName] &&\n        instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)\n    )\n    .map(propertyName => {\n      const metaData = (instance[propertyName] as any)[\n        CREATE_EFFECT_METADATA_KEY\n      ];\n      return {\n        propertyName,\n        ...metaData,\n      };\n    });\n\n  return metadata;\n}\n","export function getSourceForInstance<T>(instance: T): T {\n  return Object.getPrototypeOf(instance);\n}\n","import { compose } from '@ngrx/store';\nimport { EffectMetadata, EffectConfig } from './models';\nimport { getSourceForInstance } from './utils';\n\nconst METADATA_KEY = '__@ngrx/effects__';\n\nexport function Effect<T>({\n  dispatch = true,\n  resubscribeOnError = true,\n}: EffectConfig = {}): PropertyDecorator {\n  return function<K extends Extract<keyof T, string>>(\n    target: T,\n    propertyName: K\n  ) {\n    // Right now both createEffect and @Effect decorator set default values.\n    // Ideally that should only be done in one place that aggregates that info,\n    // for example in mergeEffects().\n    const metadata: EffectMetadata<T> = {\n      propertyName,\n      dispatch,\n      resubscribeOnError,\n    };\n    setEffectMetadataEntries<T>(target, [metadata]);\n  } as (target: {}, propertyName: string | symbol) => void;\n}\n\nexport function getEffectDecoratorMetadata<T>(\n  instance: T\n): EffectMetadata<T>[] {\n  const effectsDecorators: EffectMetadata<T>[] = compose(\n    getEffectMetadataEntries,\n    getSourceForInstance\n  )(instance);\n\n  return effectsDecorators;\n}\n\nfunction setEffectMetadataEntries<T>(\n  sourceProto: T,\n  entries: EffectMetadata<T>[]\n) {\n  const constructor = sourceProto.constructor;\n  const meta: Array<EffectMetadata<T>> = constructor.hasOwnProperty(\n    METADATA_KEY\n  )\n    ? (constructor as any)[METADATA_KEY]\n    : Object.defineProperty(constructor, METADATA_KEY, { value: [] })[\n        METADATA_KEY\n      ];\n  Array.prototype.push.apply(meta, entries);\n}\n\nfunction getEffectMetadataEntries<T>(sourceProto: T): EffectMetadata<T>[] {\n  return sourceProto.constructor.hasOwnProperty(METADATA_KEY)\n    ? (sourceProto.constructor as any)[METADATA_KEY]\n    : [];\n}\n","import { EffectMetadata, EffectsMetadata } from './models';\nimport { getCreateEffectMetadata } from './effect_creator';\nimport { getEffectDecoratorMetadata } from './effect_decorator';\n\nexport function getEffectsMetadata<T>(instance: T): EffectsMetadata<T> {\n  const metadata: EffectsMetadata<T> = {};\n\n  for (const {\n    propertyName,\n    dispatch,\n    resubscribeOnError,\n  } of getSourceMetadata(instance)) {\n    metadata[propertyName] = { dispatch, resubscribeOnError };\n  }\n\n  return metadata;\n}\n\nexport function getSourceMetadata<T>(instance: T): EffectMetadata<T>[] {\n  const effects: Array<(instance: T) => EffectMetadata<T>[]> = [\n    getEffectDecoratorMetadata,\n    getCreateEffectMetadata,\n  ];\n\n  return effects.reduce<EffectMetadata<T>[]>(\n    (sources, source) => sources.concat(source(instance)),\n    []\n  );\n}\n","import { Action } from '@ngrx/store';\nimport { merge, Notification, Observable } from 'rxjs';\nimport { ignoreElements, map, materialize, catchError } from 'rxjs/operators';\n\nimport { EffectNotification } from './effect_notification';\nimport { getSourceMetadata } from './effects_metadata';\nimport { getSourceForInstance } from './utils';\nimport { ErrorHandler } from '@angular/core';\n\nexport function mergeEffects(\n  sourceInstance: any,\n  errorHandler?: ErrorHandler\n): Observable<EffectNotification> {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n\n  const observables$: Observable<any>[] = getSourceMetadata(sourceInstance).map(\n    ({\n      propertyName,\n      dispatch,\n      resubscribeOnError,\n    }): Observable<EffectNotification> => {\n      const observable$: Observable<any> =\n        typeof sourceInstance[propertyName] === 'function'\n          ? sourceInstance[propertyName]()\n          : sourceInstance[propertyName];\n\n      const resubscribable$ = resubscribeOnError\n        ? observable$.pipe(\n            catchError(error => {\n              if (errorHandler) errorHandler.handleError(error);\n              // Return observable that produces this particular effect\n              return observable$;\n            })\n          )\n        : observable$;\n\n      if (dispatch === false) {\n        return resubscribable$.pipe(ignoreElements());\n      }\n\n      const materialized$ = resubscribable$.pipe(materialize());\n\n      return materialized$.pipe(\n        map(\n          (notification: Notification<Action>): EffectNotification => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n          })\n        )\n      );\n    }\n  );\n\n  return merge(...observables$);\n}\n","import { Inject, Injectable } from '@angular/core';\nimport {\n  Action,\n  ActionCreator,\n  Creator,\n  ScannedActionsSubject,\n} from '@ngrx/store';\nimport { Observable, OperatorFunction, Operator } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n@Injectable()\nexport class Actions<V = Action> extends Observable<V> {\n  constructor(@Inject(ScannedActionsSubject) source?: Observable<V>) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n\n  lift<R>(operator: Operator<V, R>): Observable<R> {\n    const observable = new Actions<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n}\n\n// Module-private helper type\ntype ActionExtractor<\n  T extends string | AC,\n  AC extends ActionCreator<string, Creator>,\n  E\n> = T extends string ? E : ReturnType<Extract<T, AC>>;\n/**\n * 'ofType' filters an Observable of Actions into an observable of the actions\n * whose type strings are passed to it.\n *\n * For example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\n * the type of the `Addition` action is `add`, then\n * `actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n */\nexport function ofType<\n  E extends Extract<U, { type: T1 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  U extends Action = Action,\n  V = T1 extends string ? E : ReturnType<Extract<T1, AC>>\n>(t1: T1): OperatorFunction<U, V>;\nexport function ofType<\n  E extends Extract<U, { type: T1 | T2 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2, AC, E>\n>(t1: T1, t2: T2): OperatorFunction<U, V>;\nexport function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3, AC, E>\n>(t1: T1, t2: T2, t3: T3): OperatorFunction<U, V>;\nexport function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 | T4 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  T4 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3 | T4, AC, E>\n>(t1: T1, t2: T2, t3: T3, t4: T4): OperatorFunction<U, V>;\nexport function ofType<\n  E extends Extract<U, { type: T1 | T2 | T3 | T4 | T5 }>,\n  AC extends ActionCreator<string, Creator>,\n  T1 extends string | AC,\n  T2 extends string | AC,\n  T3 extends string | AC,\n  T4 extends string | AC,\n  T5 extends string | AC,\n  U extends Action = Action,\n  V = ActionExtractor<T1 | T2 | T3 | T4 | T5, AC, E>\n>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): OperatorFunction<U, V>;\n/**\n * Fallback for more than 5 arguments.\n * There is no inference, so the return type is the same as the input -\n * Observable<Action>.\n *\n * We provide a type parameter, even though TS will not infer it from the\n * arguments, to preserve backwards compatibility with old versions of ngrx.\n */\nexport function ofType<V extends Action>(\n  ...allowedTypes: Array<string | ActionCreator<string, Creator>>\n): OperatorFunction<Action, V>;\nexport function ofType(\n  ...allowedTypes: Array<string | ActionCreator<string, Creator>>\n): OperatorFunction<Action, Action> {\n  return filter((action: Action) =>\n    allowedTypes.some(typeOrActionCreator => {\n      if (typeof typeOrActionCreator === 'string') {\n        // Comparing the string to type\n        return typeOrActionCreator === action.type;\n      }\n\n      // We are filtering by ActionCreator\n      return typeOrActionCreator.type === action.type;\n    })\n  );\n}\n","import { ErrorHandler } from '@angular/core';\nimport { Action } from '@ngrx/store';\nimport { Notification, Observable } from 'rxjs';\n\nexport interface EffectNotification {\n  effect: Observable<any> | (() => Observable<any>);\n  propertyName: string;\n  sourceName: string;\n  sourceInstance: any;\n  notification: Notification<Action | null | undefined>;\n}\n\nexport function reportInvalidActions(\n  output: EffectNotification,\n  reporter: ErrorHandler\n) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      reporter.handleError(\n        new Error(\n          `Effect ${getEffectName(\n            output\n          )} dispatched an invalid action: ${stringify(action)}`\n        )\n      );\n    }\n  }\n}\n\nfunction isAction(action: any): action is Action {\n  return (\n    typeof action !== 'function' &&\n    action &&\n    action.type &&\n    typeof action.type === 'string'\n  );\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName,\n}: EffectNotification) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n\n  return `\"${sourceName}.${propertyName}${isMethod ? '()' : ''}\"`;\n}\n\nfunction stringify(action: Action | null | undefined) {\n  try {\n    return JSON.stringify(action);\n  } catch {\n    return action;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { EffectNotification } from '.';\nimport { Action } from '@ngrx/store';\n\n/**\n * @description\n * Interface to set an identifier for effect instances.\n *\n * By default, each Effects class is registered\n * once regardless of how many times the Effect class\n * is loaded. By implementing this interface, you define\n * a unique identifier to register an Effects class instance\n * multiple times.\n *\n * @usageNotes\n *\n * ### Set an identifier for an Effects class\n *\n * ```ts\n * class EffectWithIdentifier implements OnIdentifyEffects {\n *  constructor(private effectIdentifier: string) {}\n *\n *  ngrxOnIdentifyEffects() {\n *    return this.effectIdentifier;\n *  }\n *\n * ```\n */\nexport interface OnIdentifyEffects {\n  /**\n   * @description\n   * String identifier to differentiate effect instances.\n   */\n  ngrxOnIdentifyEffects(): string;\n}\n\nexport const onIdentifyEffectsKey: keyof OnIdentifyEffects =\n  'ngrxOnIdentifyEffects';\n\nexport type onRunEffectsFn = (\n  resolvedEffects$: Observable<EffectNotification>\n) => Observable<EffectNotification>;\n\n/**\n * @description\n * Interface to control the lifecycle of effects.\n *\n * By default, effects are merged and subscribed to the store. Implement the OnRunEffects interface to control the lifecycle of the resolved effects.\n *\n * @usageNotes\n *\n * ### Implement the OnRunEffects interface on an Effects class\n *\n * ```ts\n * export class UserEffects implements OnRunEffects {\n *   constructor(private actions$: Actions) {}\n *\n *   ngrxOnRunEffects(resolvedEffects$: Observable<EffectNotification>) {\n *     return this.actions$.pipe(\n *       ofType('LOGGED_IN'),\n *       exhaustMap(() =>\n *         resolvedEffects$.pipe(\n *           takeUntil(this.actions$.pipe(ofType('LOGGED_OUT')))\n *         )\n *       )\n *     );\n *   }\n * }\n * ```\n */\nexport interface OnRunEffects {\n  /**\n   * @description\n   * Method to control the lifecycle of effects.\n   */\n  ngrxOnRunEffects: onRunEffectsFn;\n}\n\nexport const onRunEffectsKey: keyof OnRunEffects = 'ngrxOnRunEffects';\n\n/**\n * @description\n * Interface to dispatch an action after effect registration.\n *\n * Implement this interface to dispatch a custom action after\n * the effect has been added. You can listen to this action\n * in the rest of the application to execute something after\n * the effect is registered.\n *\n * @usageNotes\n *\n * ### Set an identifier for an Effects class\n *\n * ```ts\n * class EffectWithInitAction implements OnInitEffects {\n *  ngrxOnInitEffects() {\n *    return { type: '[EffectWithInitAction] Init' };\n *  }\n * ```\n */\nexport interface OnInitEffects {\n  /**\n   * @description\n   * Action to be dispatched after the effect is registered.\n   */\n  ngrxOnInitEffects(): Action;\n}\n\nexport const onInitEffects: keyof OnInitEffects = 'ngrxOnInitEffects';\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { Action, Store } from '@ngrx/store';\nimport { Notification, Observable, Subject } from 'rxjs';\nimport {\n  dematerialize,\n  exhaustMap,\n  filter,\n  groupBy,\n  map,\n  mergeMap,\n} from 'rxjs/operators';\n\nimport {\n  reportInvalidActions,\n  EffectNotification,\n} from './effect_notification';\nimport { mergeEffects } from './effects_resolver';\nimport {\n  onIdentifyEffectsKey,\n  onRunEffectsKey,\n  onRunEffectsFn,\n  OnRunEffects,\n  onInitEffects,\n} from './lifecycle_hooks';\nimport { getSourceForInstance } from './utils';\n\n@Injectable()\nexport class EffectSources extends Subject<any> {\n  constructor(private errorHandler: ErrorHandler, private store: Store<any>) {\n    super();\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.next(effectSourceInstance);\n\n    if (\n      onInitEffects in effectSourceInstance &&\n      typeof effectSourceInstance[onInitEffects] === 'function'\n    ) {\n      this.store.dispatch(effectSourceInstance[onInitEffects]());\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toActions(): Observable<Action> {\n    return this.pipe(\n      groupBy(getSourceForInstance),\n      mergeMap(source$ => source$.pipe(groupBy(effectsInstance))),\n      mergeMap(source$ =>\n        source$.pipe(\n          exhaustMap(resolveEffectSource(this.errorHandler)),\n          map(output => {\n            reportInvalidActions(output, this.errorHandler);\n            return output.notification;\n          }),\n          filter(\n            (notification): notification is Notification<Action> =>\n              notification.kind === 'N'\n          ),\n          dematerialize()\n        )\n      )\n    );\n  }\n}\n\nfunction effectsInstance(sourceInstance: any) {\n  if (\n    onIdentifyEffectsKey in sourceInstance &&\n    typeof sourceInstance[onIdentifyEffectsKey] === 'function'\n  ) {\n    return sourceInstance[onIdentifyEffectsKey]();\n  }\n\n  return '';\n}\n\nfunction resolveEffectSource(\n  errorHandler: ErrorHandler\n): (sourceInstance: any) => Observable<EffectNotification> {\n  return sourceInstance => {\n    const mergedEffects$ = mergeEffects(sourceInstance, errorHandler);\n\n    if (isOnRunEffects(sourceInstance)) {\n      return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n    }\n\n    return mergedEffects$;\n  };\n}\n\nfunction isOnRunEffects(sourceInstance: {\n  [onRunEffectsKey]?: onRunEffectsFn;\n}): sourceInstance is OnRunEffects {\n  const source = getSourceForInstance(sourceInstance);\n\n  return (\n    onRunEffectsKey in source && typeof source[onRunEffectsKey] === 'function'\n  );\n}\n","import { InjectionToken, Type } from '@angular/core';\n\nexport const IMMEDIATE_EFFECTS = new InjectionToken<any[]>(\n  'ngrx/effects: Immediate Effects'\n);\nexport const ROOT_EFFECTS = new InjectionToken<Type<any>[]>(\n  'ngrx/effects: Root Effects'\n);\nexport const FEATURE_EFFECTS = new InjectionToken<any[][]>(\n  'ngrx/effects: Feature Effects'\n);\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\n\nimport { EffectSources } from './effect_sources';\n\n@Injectable()\nexport class EffectsRunner implements OnDestroy {\n  private effectsSubscription: Subscription | null = null;\n\n  constructor(\n    private effectSources: EffectSources,\n    private store: Store<any>\n  ) {}\n\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources\n        .toActions()\n        .subscribe(this.store);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport {\n  StoreModule,\n  Store,\n  StoreRootModule,\n  StoreFeatureModule,\n} from '@ngrx/store';\nimport { EffectsRunner } from './effects_runner';\nimport { EffectSources } from './effect_sources';\nimport { ROOT_EFFECTS } from './tokens';\n\nexport const ROOT_EFFECTS_INIT = '@ngrx/effects/init';\n\n@NgModule({})\nexport class EffectsRootModule {\n  constructor(\n    private sources: EffectSources,\n    runner: EffectsRunner,\n    store: Store<any>,\n    @Inject(ROOT_EFFECTS) rootEffects: any[],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    runner.start();\n\n    rootEffects.forEach(effectSourceInstance =>\n      sources.addEffects(effectSourceInstance)\n    );\n\n    store.dispatch({ type: ROOT_EFFECTS_INIT });\n  }\n\n  addEffects(effectSourceInstance: any) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n}\n","import { NgModule, Inject, Optional } from '@angular/core';\nimport { StoreRootModule, StoreFeatureModule } from '@ngrx/store';\nimport { EffectsRootModule } from './effects_root_module';\nimport { FEATURE_EFFECTS } from './tokens';\n\n@NgModule({})\nexport class EffectsFeatureModule {\n  constructor(\n    root: EffectsRootModule,\n    @Inject(FEATURE_EFFECTS) effectSourceGroups: any[][],\n    @Optional() storeRootModule: StoreRootModule,\n    @Optional() storeFeatureModule: StoreFeatureModule\n  ) {\n    effectSourceGroups.forEach(group =>\n      group.forEach(effectSourceInstance =>\n        root.addEffects(effectSourceInstance)\n      )\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { EffectSources } from './effect_sources';\nimport { Actions } from './actions';\nimport { ROOT_EFFECTS, FEATURE_EFFECTS } from './tokens';\nimport { EffectsFeatureModule } from './effects_feature_module';\nimport { EffectsRootModule } from './effects_root_module';\nimport { EffectsRunner } from './effects_runner';\n\n@NgModule({})\nexport class EffectsModule {\n  static forFeature(\n    featureEffects: Type<any>[]\n  ): ModuleWithProviders<EffectsFeatureModule> {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [\n        featureEffects,\n        {\n          provide: FEATURE_EFFECTS,\n          multi: true,\n          deps: featureEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n\n  static forRoot(\n    rootEffects: Type<any>[]\n  ): ModuleWithProviders<EffectsRootModule> {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [\n        EffectsRunner,\n        EffectSources,\n        Actions,\n        rootEffects,\n        {\n          provide: ROOT_EFFECTS,\n          deps: rootEffects,\n          useFactory: createSourceInstances,\n        },\n      ],\n    };\n  }\n}\n\nexport function createSourceInstances(...instances: any[]) {\n  return instances;\n}\n","import { Action } from '@ngrx/store';\nimport {\n  defer,\n  merge,\n  Notification,\n  Observable,\n  OperatorFunction,\n  Subject,\n} from 'rxjs';\nimport {\n  concatMap,\n  dematerialize,\n  filter,\n  finalize,\n  map,\n  materialize,\n} from 'rxjs/operators';\n\n/** Represents config with named paratemeters for act */\nexport interface ActConfig<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action,\n  CompleteAction extends Action,\n  UnsubscribeAction extends Action\n> {\n  // Project function that produces the output actions in success cases\n  project: (input: Input, index: number) => Observable<OutputAction>;\n  // Error handle function for project\n  // error that happened during project execution\n  // input value that project errored with\n  error: (error: any, input: Input) => ErrorAction;\n  // Optional complete action provider\n  // count is the number of actions project emitted before completion\n  // input value that project completed with\n  complete?: (count: number, input: Input) => CompleteAction;\n  // Optional flattening operator\n  operator?: <Input, OutputAction>(\n    project: (input: Input, index: number) => Observable<OutputAction>\n  ) => OperatorFunction<Input, OutputAction>;\n  // Optional unsubscribe action provider\n  // count is the number of actions project emitted before unsubscribing\n  // input value that was unsubscribed from\n  unsubscribe?: (count: number, input: Input) => UnsubscribeAction;\n}\n\n/**\n * Wraps project fn with error handling making it safe to use in Effects.\n * Takes either config with named properties that represent different possible\n * callbacks or project/error callbacks that are required.\n */\nexport function act<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action\n>(\n  project: (input: Input, index: number) => Observable<OutputAction>,\n  error: (error: any, input: Input) => ErrorAction\n): (source: Observable<Input>) => Observable<OutputAction | ErrorAction>;\nexport function act<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action,\n  CompleteAction extends Action = never,\n  UnsubscribeAction extends Action = never\n>(\n  config: ActConfig<\n    Input,\n    OutputAction,\n    ErrorAction,\n    CompleteAction,\n    UnsubscribeAction\n  >\n): (\n  source: Observable<Input>\n) => Observable<\n  OutputAction | ErrorAction | CompleteAction | UnsubscribeAction\n>;\nexport function act<\n  Input,\n  OutputAction extends Action,\n  ErrorAction extends Action,\n  CompleteAction extends Action = never,\n  UnsubscribeAction extends Action = never\n>(\n  /** Allow to take either config object or project/error functions */\n  configOrProject:\n    | ActConfig<\n        Input,\n        OutputAction,\n        ErrorAction,\n        CompleteAction,\n        UnsubscribeAction\n      >\n    | ((input: Input, index: number) => Observable<OutputAction>),\n  errorFn?: (error: any, input: Input) => ErrorAction\n): (\n  source: Observable<Input>\n) => Observable<\n  OutputAction | ErrorAction | CompleteAction | UnsubscribeAction\n> {\n  const { project, error, complete, operator, unsubscribe } =\n    typeof configOrProject === 'function'\n      ? {\n          project: configOrProject,\n          error: errorFn!,\n          operator: concatMap,\n          complete: undefined,\n          unsubscribe: undefined,\n        }\n      : { ...configOrProject, operator: configOrProject.operator || concatMap };\n\n  type ResultAction =\n    | OutputAction\n    | ErrorAction\n    | CompleteAction\n    | UnsubscribeAction;\n  return source =>\n    defer(\n      (): Observable<ResultAction> => {\n        const subject = new Subject<UnsubscribeAction>();\n        return merge(\n          source.pipe(\n            operator((input, index) =>\n              defer(() => {\n                let completed = false;\n                let errored = false;\n                let projectedCount = 0;\n                return project(input, index).pipe(\n                  materialize(),\n                  map(\n                    (notification): Notification<ResultAction> | undefined => {\n                      switch (notification.kind) {\n                        case 'E':\n                          errored = true;\n                          return new Notification(\n                            // TODO: remove any in RxJS 6.5\n                            'N' as any,\n                            error(notification.error, input)\n                          );\n                        case 'C':\n                          completed = true;\n                          return complete\n                            ? new Notification(\n                                // TODO: remove any in RxJS 6.5\n                                'N' as any,\n                                complete(projectedCount, input)\n                              )\n                            : undefined;\n                        default:\n                          ++projectedCount;\n                          return notification;\n                      }\n                    }\n                  ),\n                  filter((n): n is NonNullable<typeof n> => n != null),\n                  dematerialize(),\n                  finalize(() => {\n                    if (!completed && !errored && unsubscribe) {\n                      subject.next(unsubscribe(projectedCount, input));\n                    }\n                  })\n                );\n              })\n            )\n          ),\n          subject\n        );\n      }\n    );\n}\n","/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {EffectsFeatureModule as Éµngrx_modules_effects_effects_c} from './src/effects_feature_module';\nexport {createSourceInstances as Éµngrx_modules_effects_effects_a} from './src/effects_module';\nexport {EffectsRootModule as Éµngrx_modules_effects_effects_b} from './src/effects_root_module';\nexport {EffectsRunner as Éµngrx_modules_effects_effects_f} from './src/effects_runner';\nexport {FEATURE_EFFECTS as Éµngrx_modules_effects_effects_e,ROOT_EFFECTS as Éµngrx_modules_effects_effects_d} from './src/tokens';"],"names":["compose","tslib_1.__values","catchError","ignoreElements","materialize","map","merge","tslib_1.__extends","Injectable","tslib_1.__param","Inject","ScannedActionsSubject","Observable","filter","groupBy","mergeMap","exhaustMap","dematerialize","ErrorHandler","Store","Subject","InjectionToken","NgModule","Optional","StoreRootModule","StoreFeatureModule","defer","Notification","finalize"],"mappings":"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"}